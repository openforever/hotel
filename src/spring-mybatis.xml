<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-3.2.xsd">
 
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" 
    	init-method="init" destroy-method="close" >
	    <property name="driverClassName">
	      <value>${jdbc_driverClassName}</value>
	    </property>
	    <property name="url">
	      <value>${jdbc_url}</value>
	    </property>
	    <property name="username">
	      <value>${jdbc_username}</value>
	    </property>
	    <property name="password">
	      <value>${jdbc_password}</value>
	    </property>
	    <!-- 连接池最大使用连接数 -->
	    <property name="maxActive">
	      <value>20</value>
	    </property>
	    <!-- 初始化连接大小 -->
	    <property name="initialSize">
	      <value>1</value>
	    </property>
	    <!-- 获取连接最大等待时间 -->
	    <property name="maxWait">
	      <value>60000</value>
	    </property>
	    <!-- 连接池最大空闲 -->
	    <property name="maxIdle">
	      <value>20</value>
	    </property>
	    <!-- 连接池最小空闲 -->
	    <property name="minIdle">
	      <value>3</value>
	    </property>
	    <!-- 自动清除无用连接 -->
	    <property name="removeAbandoned">
	      <value>true</value>
	    </property>
	    <!-- 清除无用连接的等待时间 -->
	    <property name="removeAbandonedTimeout">
	      <value>180</value>
	    </property>
	    <!-- 连接属性 -->
	    <property name="connectionProperties">
	      <value>clientEncoding=UTF-8</value>
	    </property>
   </bean>
        
  <!-- mybatis文件配置，扫描所有mapper文件 -->
  <bean id="sqlSessionFactory"
      class="org.mybatis.spring.SqlSessionFactoryBean"
      p:typeAliasesPackage="cn.edu.jlu.hotelms"
      p:dataSource-ref="dataSource"
      p:configLocation="classpath:mybatis-config.xml"
      p:mapperLocations="classpath:cn/edu/jlu/hotelms/*/mapping/*.xml"/>
  <!-- configLocation为mybatis属性 mapperLocations为所有mapper-->
       
   <!-- spring与mybatis整合配置，扫描所有dao,加载映射文件 -->
   <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
        p:basePackage="cn.edu.jlu.hotelms.*.mapper"
        p:sqlSessionFactoryBeanName="sqlSessionFactory"/>
  
   <!-- 对数据源进行事务管理 -->
  <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
        p:dataSource-ref="dataSource"/>
  
  <!-- 5. 使用声明式事务
  <tx:annotation-driven transaction-manager="dtmanager" />  -->
  
  <!--
  	Spring常见事务类型
  	PROPAGATION_REQUIRED 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
	PROPAGATION_SUPPORTS 支持当前事务，如果当前没有事务，就以非事务方式执行。
	PROPAGATION_MANDATORY 支持当前事务，如果当前没有事务，就抛出异常。
	PROPAGATION_REQUIRES_NEW 新建事务，如果当前存在事务，把当前事务挂起。
	PROPAGATION_NOT_SUPPORTED 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
	PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常。
	PROPAGATION_REQUIRED类似的操作。
	PROPAGATION_NESTED 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与 
-->
  	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 对所有以delete,insert,update,save开头的方法采用只读型事务控制类型  -->
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<!-- 第一个*代表返回值，第二*代表hotelms下子包，第三个*代表方法名，“（..）”代表方法参数 -->
		<aop:pointcut id="pc" expression="execution(* cn.edu.jlu.hotelms.*.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
	
	
</beans>